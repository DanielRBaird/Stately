/*
 * Copyright (C) 2018 Touchlab, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'org.jetbrains.kotlin.multiplatform'

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
}

group = GROUP
version = VERSION_NAME

kotlin {
//    macosX64("apple")
//    macosX64("nativeCommon")
    jvm()
//    js()
    macosX64(){
        compilations.test {
            it.extraOpts("-native-library", "../cpp/bcdist/macos_x64/tlruntime.bc")
        }
    }
    iosArm32(){
        compilations.test {
            it.extraOpts("-native-library", "../cpp/bcdist/ios_arm32/tlruntime.bc")
        }
    }
    iosArm64(){
        compilations.test {
            it.extraOpts("-native-library", "../cpp/bcdist/ios_arm64/tlruntime.bc")
        }
    }
    iosX64(){
        compilations.test {
            it.extraOpts("-native-library", "../cpp/bcdist/ios_x64/tlruntime.bc")
        }
    }
    mingwX64()
    
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        commonTest {
            dependencies {
        		implementation 'org.jetbrains.kotlin:kotlin-test-common'
        		implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
                implementation 'co.touchlab:testhelp:0.2.3-eap-32'
            }
        }
        jvmMain {
            dependsOn commonMain
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
            }
        }
        jvmTest {
            dependsOn commonTest
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        
        //Disabling js till we sort out some testing
        /*jsMain {
            dependsOn commonMain
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
            }
        }
        jsTest {
            dependsOn commonTest
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }*/

        nativeCommonMain {
            dependsOn commonMain
        }
        
        nativeCommonTest {
            dependsOn commonTest
        }

        appleMain {
            dependsOn nativeCommonMain
        }

        appleTest {
            dependsOn nativeCommonTest
        }

        macosX64().compilations.main.defaultSourceSet {
            dependsOn appleMain
        }

        macosX64().compilations.test.defaultSourceSet {
            dependsOn appleTest
        }
        
        iosArm32().compilations.main.defaultSourceSet {
            dependsOn appleMain
        }

        iosArm32().compilations.test.defaultSourceSet {
            dependsOn appleTest
        }
        
        iosArm64().compilations.main.defaultSourceSet {
            dependsOn appleMain
        }

        iosArm64().compilations.test.defaultSourceSet {
            dependsOn appleTest
        }
        
        iosX64().compilations.main.defaultSourceSet {
            dependsOn appleMain
        }

        iosX64().compilations.test.defaultSourceSet {
            dependsOn appleTest
        }

        otherNativeMain {
            dependsOn nativeCommonMain
        }

        otherNativeTest {
            dependsOn nativeCommonTest
        }

        mingwX64().compilations.main.defaultSourceSet {
            dependsOn otherNativeMain
        }
        
        mingwX64().compilations.test.defaultSourceSet {
            dependsOn mingwTest
        }
    }
}

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn 'linkTestDebugExecutableIosX64'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.iosX64.compilations.test.getBinary('EXECUTABLE', 'DEBUG')
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}

void mergeCppOutput(String archFolder, String archZip){
    ant.zip(
            update: "true",
            destfile: "${project.buildDir}/classes/kotlin/$archFolder/main/stately.klib"
    ) {
        zipfileset(
                dir: "${project.projectDir}/../cpp/bcdist/$archZip",
                prefix: "targets/$archZip/native"
        ) {
            include(name: '**.bc')
        }
    }
}

task mergeCppAll(dependsOn:build) {
    doLast {
        mergeCppOutput("iosArm32", "ios_arm32")
        mergeCppOutput("iosArm64", "ios_arm64")
        mergeCppOutput("iosX64", "ios_x64")
        mergeCppOutput("macos", "macos_x64")
//        mergeCppOutput("mingw", "mingw_x64")
    }
}

apply from: '../gradle/gradle-mvn-mpp-push.gradle'

tasks.findByName("publish").dependsOn("mergeCppAll")
tasks.findByName("publishToMavenLocal").dependsOn("mergeCppAll")

