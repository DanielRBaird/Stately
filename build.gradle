/*
 * Copyright (C) 2018 Touchlab, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
        google()
        gradlePluginPortal()
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev/" }
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap/" }
        maven {
            url  "https://dl.bintray.com/jetbrains/kotlin-native-dependencies"
        }
    }

    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$BINTRAY_VERSION"
    }
}

plugins {
    id 'kotlin-multiplatform' version '1.3.0'
}
repositories {
    maven {     url 'http://dl.bintray.com/kotlin/kotlin-eap' }
    maven {     url 'https://dl.bintray.com/kotlin/kotlin-dev' }
    mavenCentral()
}

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.js, 'js')
        // For ARM, preset should be changed to presets.iosArm32 or presets.iosArm64
        // For Linux, preset should be changed to e.g. presets.linuxX64
        // For MacOS, preset should be changed to e.g. presets.macosX64
        /*fromPreset(presets.iosX64, 'ios'){
            compilations.each {
                it.outputKinds('EXECUTABLE')
            }
        }*/
        
        
//        fromPreset(presets.macosX64, 'nativeCommon')

        fromPreset(presets.macosX64, 'macos')
        fromPreset(presets.iosX64, 'iosX64')
        fromPreset(presets.iosArm32, 'iosArm32')
        fromPreset(presets.iosArm64, 'iosArm64')
        
        
        /*configure([macos]) {
            compilations.main.outputKinds('EXECUTABLE')
            compilations.main.entryPoint = 'sample.main'
        }*/
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        commonTest {
            dependencies {
        		implementation 'org.jetbrains.kotlin:kotlin-test-common'
        		implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        
        jsMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
            }
        }
        jsTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }

        nativeCommonMain { }
        nativeCommonTest { }

        appleMain {
            dependsOn nativeCommonMain
        }

        appleTest {
            dependsOn nativeCommonTest
        }

        configure([iosX64Main, iosArm32Main, iosArm64Main, macosMain]) {
            dependsOn appleMain
        }

        configure([iosX64Test, iosArm32Test, iosArm64Test, macosTest]) {
            dependsOn appleTest
        }

        /*otherNativeMain {
            dependsOn nativeCommonMain
        }

        otherNativeTest {
            dependsOn nativeCommonTest
        }

        configure([androidNativeArm32, androidNativeArm64]) {
            dependsOn otherNativeMain
        }

        configure([androidNativeArm32, androidNativeArm64]) {
            dependsOn otherNativeTest
        }*/
    }
}

apply from: 'gradle/configpublish.gradle'