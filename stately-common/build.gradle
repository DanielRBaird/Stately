/*
 * Copyright (C) 2018 Touchlab, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'org.jetbrains.kotlin.multiplatform'

group = GROUP
version = VERSION_NAME
def ideaActive = System.getProperty('idea.active') == 'true'

kotlin {
    jvm()
    js {
        nodejs()
        browser()
    }
    macosX64()
    iosArm32()
    iosArm64()
    iosX64()
    watchosArm32()
    watchosArm64()
    watchosX86()
    watchosX64()
    tvosArm64()
    tvosX64()
    mingwX64()
    linuxX64()
    linuxArm32Hfp()
    linuxMips32()
//    if (ideaActive) {
//        macosX64("nativeCommon")
//    } else {
//        macosX64()
//        iosArm32()
//        iosArm64()
//        iosX64()
//        linuxX64()
//        linuxArm32Hfp()
//        linuxMips32()
//        watchosArm32()
//        watchosArm64()
//        watchosX86()
//        tvosArm64()
//        tvosX64()
//        //    androidNativeArm32()
//        //    androidNativeArm64()
//        mingwX64()
//    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }

        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation "co.touchlab:testhelp:$TESTHELP_VERSION"
            }
        }

        jvmMain {
            dependsOn commonMain
            dependencies {
                implementation kotlin('stdlib-jdk8')
            }
        }
        jvmTest {
            dependsOn commonTest
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }

        jsMain {
            dependsOn commonMain
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependsOn commonTest
            dependencies {
                implementation kotlin('test-js')
            }
        }

        nativeCommonMain {
            dependsOn commonMain
        }
        nativeCommonTest {
            dependsOn commonTest
        }
//        nativeDarwinMain {
//            dependsOn nativeCommonMain
//        }
//        nativeDarwinTest {
//            dependsOn nativeCommonTest
//        }
        macosX64Main {
            dependsOn nativeCommonMain
        }
        iosArm32Main {
            dependsOn nativeCommonMain
        }
        iosArm64Main {
            dependsOn nativeCommonMain
        }
        iosX64Main {
            dependsOn nativeCommonMain
        }
        watchosArm32Main {
            dependsOn nativeCommonMain
        }
        watchosArm64Main {
            dependsOn nativeCommonMain
        }
        watchosX86Main {
            dependsOn nativeCommonMain
        }
        watchosX64Main {
            dependsOn nativeCommonMain
        }
        tvosArm64Main {
            dependsOn nativeCommonMain
        }
        tvosX64Main {
            dependsOn nativeCommonMain
        }

        mingwX64Main {
            dependsOn nativeCommonMain
        }

        linuxX64Main {
            dependsOn nativeCommonMain
        }
        linuxArm32HfpMain {
            dependsOn nativeCommonMain
        }
        linuxMips32Main {
            dependsOn nativeCommonMain
        }

        /*nativeMingwMain {
            dependsOn nativeCommonMain
        }
        nativeMingwTest {
            dependsOn nativeCommonTest
        }

        mingwX64Main {
            dependsOn nativeMingwMain
        }

        nativeLinuxMain {
            dependsOn nativeCommonMain
        }
        nativeLinuxTest {
            dependsOn nativeCommonTest
        }*/

        /*linuxX64Main {
            dependsOn nativeLinuxMain
        }
        linuxArm32HfpMain {
            dependsOn nativeLinuxMain
        }
        linuxMips32Main {
            dependsOn nativeLinuxMain
        }*/
    }
}

configurations {
    compileClasspath
}

apply from: '../gradle/gradle-mvn-mpp-push.gradle'
